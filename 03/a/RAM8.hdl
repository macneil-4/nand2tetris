// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM8.hdl

/**
 * Memory of 8 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM8 {
    IN in[16], load, address[3];
    OUT out[16];

    PARTS:
    // Register (in[16]=in[16], load=load, out=out);
    // Use address to select register in RAM block
    // if load == 0, then read from memory address, ignore in
    // if load == 1, load value of in into register at specified address
    // Register[8]

 	/*
 	CHIP DMux8Way {
    IN in, sel[3];
    OUT a, b, c, d, e, f, g, h;
 	*/   

 	DMux8Way(in=load, sel[0..2]=address, a=a, b=b, c=c, d=d, e=e, f=f, g=g, h=h);

 	Register (in[0..15]=in, load=a, out[0..15]=aout);
 	Register (in[0..15]=in, load=b, out[0..15]=bout);
 	Register (in[0..15]=in, load=c, out[0..15]=cout);
 	Register (in[0..15]=in, load=d, out[0..15]=dout);
 	Register (in[0..15]=in, load=e, out[0..15]=eout);
 	Register (in[0..15]=in, load=f, out[0..15]=fout);
 	Register (in[0..15]=in, load=g, out[0..15]=gout);
 	Register (in[0..15]=in, load=h, out[0..15]=hout);

 	Mux8Way16 (a=aout, b=bout, c=cout, d=dout, e=eout, f=fout, g=gout, h=hout, sel=address, out=out);
}